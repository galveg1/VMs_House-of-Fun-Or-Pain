               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 0434                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 044f                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 0455                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c75                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 687c                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0070                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 142d                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 687d                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0071                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 142d                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 687e                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 0072                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 142d                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 7875                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 787a                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 687c                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 687e                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c7a                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; Has the run-time logging application requested locked struct access?
0023 ---- 7879                         ld          R7, [#fwCtrlInt/rtlStructLockReq]
0024 ---- fa01                         cmp         R7, #1
0025 ---- be05                         bneq        /noRtlStructWriteReq

                                           ; Signalize that we're ready
0026 ---- 7002                             ld          R7, #2
0027 ---- 7c79                             st          R7, [#fwCtrlInt/rtlStructLockReq]

               /waitRtlStructWriteLoop:    ; Wait until the run-time logging application is done
0028 ---- 7879                             ld          R7, [#fwCtrlInt/rtlStructLockReq]
0029 ---- fa00                             cmp         R7, #0
002a ---- befd                             bneq        /waitRtlStructWriteLoop
               /noRtlStructWriteReq:
                                       ; We're READY for another request
002b ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
002c ---- 0458                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
002d ---- 7875                         ld          R7, [#fwCtrlInt/taskId]
002e ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
002f ---- ed8f                         lsr         R6, R7
0030 ---- ec01                         tst         R6, #0x0001
0031 ---- be01                         bnz         /noSkip
0032 ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
0033 ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
0034 ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
0035 ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
0036 ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
0037 ---- 187a                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0038 ---- 9d88                             lsr         R1, R0
0039 ---- 9c01                             tst         R1, #0x0001
003a ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
003b ---- 106f                                 ld          R1, #pFwTaskExecuteScheduleTable
003c ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
003d ---- aa00                                 cmp         R2, #0
003e ---- b609                                 beq         /skip
003f ---- a8ff                                 add         R2, #-1
0040 ---- af39                                 st          R2, [R1+R0]
0041 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
0042 ---- 0c75                                     st          R0, [#fwCtrlInt/taskId]
0043 ---- 8871                                     add         R0, #pFwTaskExecuteFuncTable
0044 ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
0045 ---- fd47                                     nop
0046 ---- 9db7                                     jsr         R0
0047 ---- 0875                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0048 ---- 8801                             add         R0, #1

0049 ---- 8a01                         cmp         R0, #TASK_COUNT
004a ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
004b ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
004c ---- aefe                         biob1       /waitOnRtcClearing
004d ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
004e ---- 0458                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
004f ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0050 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0051 ---- 0000                         ld          R0, #0
0052 ---- 0c75                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
0053 ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
0054 ---- 0458                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
0055 ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
0056 ---- 03ff                         ld          R0, #-1
0057 ---- 0c77                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0058 ---- 7876                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0059 ---- 6877                         ld          R6, [#fwCtrlInt/alertGenMask]
005a ---- ed37                         tst         R6, R7
005b ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
005c ---- 0000                             ld          R0, #0
005d ---- 0c76                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
005e ---- 7c7b                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
005f ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0060 ---- 0c77                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0061 ---- 7877                         ld          R7, [#fwCtrlInt/alertGenMask]
0062 ---- 6878                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
0063 ---- fd0e                         or          R7, R6
0064 ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
0065 ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
0066 ---- fd0e                         or          R7, R6
0067 ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0068 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0069 ---- bdb7 sleepInstr:             sleep




006a ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
006b ---- a6fe                         biob0       AdiDdiAcquire
006c ---- adb7                         rts

006d ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
006e ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
006f ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0070 ---- 0083                         dw          #adcWindowMonitor/initialize
               pFwTaskExecuteFuncTable:
0071 ---- 0088                         dw          #adcWindowMonitor/execute
               pFwTaskTerminateFuncTable:
0072 ---- 00bc                         dw          #adcWindowMonitor/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
0073 ---- 0000                         dw          #0x0000
               pRtlTaskLogMaskTable:
0074 ---- 0000                         dw          #0x0000


               ; Internal control data
               fwCtrlInt:
0075 ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
0076 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0077 ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
0078 ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
0079 ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
007a ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
007b ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
007c ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
007d ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
007e ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: ADC Window Monitor"
               adcWindowMonitor/cfg:
               adcWindowMonitor/cfg/adcWindowHigh:
007f ---- 0000                         dw          #0
               adcWindowMonitor/cfg/adcWindowLow:
0080 ---- 0000                         dw          #0
               adcWindowMonitor/input:
               adcWindowMonitor/output:
               adcWindowMonitor/output/adcValue:
0081 ---- 0000                         dw          #0
               adcWindowMonitor/output/bvWindowState:
0082 ---- 0000                         dw          #0
               adcWindowMonitor/state:
               .segment end "Task: ADC Window Monitor"


               .segment begin "Task: ADC Window Monitor"
               adcWindowMonitor/initialize:
               ;? // Select ADC input
               ;? adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);
0083 ---- 7007                         ld          R7, #7
0084 ---- 14bd                         jsr         AdccompbSelectGpioInput
               ;?
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0085 ---- 0001                         ld          R0, #1
0086 ---- 0c6f                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcWindowMonitor/initializeDone:
0087 ---- adb7                         rts




               adcWindowMonitor/execute:
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);
0088 ---- f502                         loop        #128, /id0079
0089 ---- fd47                         nop
008a ---- fd47                         nop
008b ---- fd47                         nop
               /id0079:
008c ---- 7041                         ld          R7, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
008d ---- 146a                         jsr         AdiDdiAcquire
008e ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
008f 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0091 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0080:
0092 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0093 ---- a6fe                         biob0       /id0080
0094 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0095 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0096 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0097 ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0098 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0099 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
009a ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
009b ---- fd47                         nop
009c ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
009d ---- 146d                         jsr         AdiDdiRelease
               ;?
               ;? // Sample the sensor
               ;? U16 adcValue;
               ;? adcGenManualTrigger();
009e ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue);
009f ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00a0 ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
00a1 ---- fdb1                         wev1        #WEVSEL_PROG
00a2 ---- 8902                         in          R0, [#IOP_ANAIF_ADCFIFO]
               ;? output.adcValue = adcValue;
00a3 ---- 0c81                         st          R0, [#adcWindowMonitor/output/adcValue]
               ;?
               ;? // Disable the ADC
               ;? adcDisable();
00a4 ---- 14ca                         jsr         AdcDisable
               ;?
               ;? // Determine if the ADC value is below the low threshold or above the high threshold
               ;? U16 bvWindowState = 0x0000;
00a5 ---- 7000                         ld          R7, #0
               ;? if (adcValue < cfg.adcWindowLow) {
00a6 ---- 1880                         ld          R1, [#adcWindowMonitor/cfg/adcWindowLow]
00a7 ---- 8d29                         cmp         R0, R1
00a8 ---- a601                         bgeu        /id0088
               ;?     bvWindowState |= BV_ADC_WINDOW_LOW;
00a9 ---- f201                             or          R7, #1
               ;? }
               /id0088:
               ;? if (adcValue > cfg.adcWindowHigh) {
00aa ---- 187f                         ld          R1, [#adcWindowMonitor/cfg/adcWindowHigh]
00ab ---- 8d29                         cmp         R0, R1
00ac ---- 9e01                         bleu        /id0092
               ;?     bvWindowState |= BV_ADC_WINDOW_HIGH;
00ad ---- f202                             or          R7, #2
               ;? }
               /id0092:
               ;?
               ;? // Alert the driver when the window state changes
               ;? if (bvWindowState != output.bvWindowState) {
00ae ---- 0882                         ld          R0, [#adcWindowMonitor/output/bvWindowState]
00af ---- fd28                         cmp         R7, R0
00b0 ---- b604                         beq         /id0096
               ;?     output.bvWindowState = bvWindowState;
00b1 ---- 7c82                             st          R7, [#adcWindowMonitor/output/bvWindowState]
               ;?     fwGenAlertInterrupt();
00b2 ---- 0876                             ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00b3 ---- 8201                             or          R0, #(1 << 0)
00b4 ---- 0c76                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? }
               /id0096:
               ;?
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00b5 ---- 0001                         ld          R0, #1
00b6 ---- 0c6f                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               ;?
               ;? // Run-time logging: Log the output data structure
               ;? rtlLogStructs(BV_RTL_LOG_OUTPUT);
00b7 ---- 0004                         ld          R0, #4
00b8 ---- 1874                         ld          R1, [#(pRtlTaskLogMaskTable + 0)]
00b9 ---- 8d01                         and         R0, R1
00ba ---- 0c73                         st          R0, [#(pRtlTaskLogReqTable + 0)]
               adcWindowMonitor/executeDone:
00bb ---- adb7                         rts




               adcWindowMonitor/terminate:
               ;?
               adcWindowMonitor/terminateDone:
00bc ---- adb7                         rts
               .segment end "Task: ADC Window Monitor"


               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00bd ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
00be ---- 146a                         jsr         AdiDdiAcquire
00bf 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00c1 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
00c2 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00c4 ---- ed8f                         lsr         R6, R7
00c5 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
00c6 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00c7 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
00c8 ---- 146d                         jsr         AdiDdiRelease
00c9 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
00ca ---- 146a                         jsr         AdiDdiAcquire
00cb ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
00cc ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
00cd ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
00ce ---- fb54                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Ensure that it has taken effect
00cf ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00d0 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00d1 ---- 146d                         jsr         AdiDdiRelease

                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
00d2 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]

                                       ; Disable the ADC data interface
00d3 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

00d4 ---- adb7                         rts
               .segment end "Procedure Libary"


; Generated by DESKTOP-6LLES2D at 2018-11-18 15:14:37.086
